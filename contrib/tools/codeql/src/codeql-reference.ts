import * as fs from "fs";
import * as I from "immutable";
import * as path from "path";
import { getDriverCommandlineInputs } from "../../../../src/driver";
import { BCVE, BCVELog, Config, Dir, ToolID } from "../../../../src/types";
import { readJSONFile, writeJSONFile } from "../../../../src/util";

async function getCodeQlReferenceResults(
  toolID: ToolID,
  bcves: BCVE[],
  config: Config,
  referenceDir: Dir
) {
  let cves = I.Set(bcves.map(t => t.CVE));

  console.log(
    `Copying reference results from ${referenceDir} to ${config.results}`
  );
  fs.readdirSync(referenceDir)
    .map(f => path.join(referenceDir, f))
    .map(file => ({
      file,
      log: readJSONFile(file) as BCVELog
    }))
    .filter(({ log }) => cves.includes(log.runs[0].CVE))
    .forEach(({ file, log }) => {
      let run = log.runs[0];
      let output = path.resolve(
        path.join(config.results, `${toolID}_${run.CVE}_${run.commit}.json`)
      );
      if (!output.startsWith(path.resolve(config.results))) {
        throw new Error(`Could not move ${file} to ${output}`);
      }
      // adjust data
      log.runs.forEach(r => (r.toolID = toolID));
      writeJSONFile(output, log);
    });
  console.log("Done");
}

let { toolID, bcves, config } = getDriverCommandlineInputs();
getCodeQlReferenceResults(
  toolID,
  bcves,
  config,
  config.tools[toolID].options.referenceDataDir
)
  .then(() => process.exit(0))
  .catch(e => {
    console.error(e);
    process.exit(1);
  });
