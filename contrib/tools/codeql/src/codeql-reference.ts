import * as fs from "fs";
import * as I from "immutable";
import * as path from "path";
import { BCVE, BCVELog, Dir, ToolID } from "../../../../src/types";
import {
  readExportFile,
  readJSONFile,
  writeJSONFile
} from "../../../../src/util";

async function getCodeQlReferenceResults(
  bcves: BCVE[],
  resultDir: Dir,
  referenceDir: Dir,
  toolID: ToolID
) {
  let cves = I.Set(bcves.map(t => t.CVE));

  console.log(`Copying reference results from ${referenceDir} to ${resultDir}`);
  fs.readdirSync(referenceDir)
    .map(f => path.join(referenceDir, f))
    .map(file => ({
      file,
      log: readJSONFile(file) as BCVELog
    }))
    .filter(({ log }) => cves.includes(log.runs[0].CVE))
    .forEach(({ file, log }) => {
      let run = log.runs[0];
      let output = path.resolve(
        path.join(resultDir, `${toolID}_${run.CVE}_${run.commit}.json`)
      );
      if (!output.startsWith(path.resolve(resultDir))) {
        throw new Error(`Could not move ${file} to ${output}`);
      }
      // adjust data
      log.runs.forEach(r => (r.toolID = toolID));
      writeJSONFile(output, log);
    });
  console.log("Done");
}

let referenceDir = process.argv[2],
  toolID = process.argv[3],
  targetsFile = process.argv[4],
  resultDir = process.argv[5],
  bcves = readExportFile(targetsFile);

let p = getCodeQlReferenceResults(bcves, resultDir, referenceDir, toolID);
p.then(() => process.exit(0)).catch(e => {
  console.error(e);
  process.exit(1);
});
