import "module-alias/register";
import {
  AlertClassification,
  BCVE,
  BCVEAlert,
  BCVEResultStatus,
  StandaloneRun,
  Dir,
  ToolID
} from "@types";
import { readExportFile } from "@util";
import { driver, DriverState } from "@driver";

async function runWithDriver(toolID: ToolID, bcves: BCVE[], resultDir: Dir) {
  type State = DriverState<any>;
  async function run(state: State) {
    let run: StandaloneRun = {
      CVE: state.bcve.CVE,
      commit: state.commitDescription.commit,
      toolID: state.toolID,
      reproduction: undefined,
      alerts: state.commitDescription.weaknesses.map(
        (w): BCVEAlert => {
          if (w.format !== "simple") {
            throw new Error(
              "Can only handle weaknesses in the 'simple' format"
            );
          }
          return {
            format: w.format,
            ruleID: `"${w.explanation}"`,
            explanation: w.explanation,
            location: w.location,
            classification: AlertClassification.TP
          };
        }
      ),
      status: BCVEResultStatus.SUCCESS
    };
    state.log.runs.push(run);
  }
  return driver(bcves, resultDir, toolID, undefined, run, false);
}

let toolID = process.argv[2],
  targetsFile = process.argv[3],
  resultDir = process.argv[4],
  bcves = readExportFile(targetsFile);
runWithDriver(toolID, bcves, resultDir)
  .then(() => process.exit(0))
  .catch(e => {
    console.error(e);
    process.exit(1);
  });
