import * as MaterialTable from "material-table";
import * as React from "react";
import { Tab, TabList, TabPanel, Tabs } from "react-tabs";
import BenchmarkView from "./BenchmarkView";
import CompactLocationURL from "./CompactLocationURL";
import * as Conclusions from "./Conclusions";
import * as MyTables from "./MyTables";
import { Alert, CommitData, Weakness } from "../shared/shared-types";
import ToolView from "./ToolView";
import {
  AlertCountComparison,
  getToolIcon,
  groupAlertsByTool,
  makeCompactLocationString,
  makeComparisons,
  makeToolColumnKey,
  mkToolIDString,
  SetSourceFocus
} from "./util";
type Props = {
  CVE: string;
  toolIDs: string[];
  alerts: Alert[];
  weaknesses: Weakness[];
  setSourceFocus: SetSourceFocus;
  unpatchedCommit: CommitData;
  patchCommit: CommitData;
  toolRuns: { [toolID: string]: string[] };
  CWEs: string[];
};
type OverviewProps = {
  CVE: string;
  toolIDs: string[];
  alertCountComparisons: AlertCountComparison[];
  patchCommit: CommitData;
  unpatchedCommit: CommitData;
  alerts: Alert[];
  weaknesses: Weakness[];
  setSourceFocus: SetSourceFocus;
  toolRuns: { [toolID: string]: string[] };
};
type OverviewState = {
  source?: string;
  commit?: string;
  file?: string;
  line?: number;
};
class OverviewTable extends React.Component<OverviewProps, OverviewState> {
  constructor(props: OverviewProps) {
    super(props);
  }
  render() {
    type ToolJudgement = boolean;
    type RowType = {
      commit: CommitData;
      file: string;
      line: number;
      compactLocation: string;
      explanation: string;
    } & { [toolColumn: string]: ToolJudgement };
    let self = this;
    let columns: MaterialTable.Column<RowType>[] = [
      {
        title: "",
        render: (row: RowType) => (
          <>
            <div className="weakness">
              <span className="location">
                <CompactLocationURL
                  commit={row.commit}
                  file={row.file}
                  line={row.line}
                  setSourceFocus={self.props.setSourceFocus}
                />
              </span>
            </div>
            <div>
              <span className="explanation">{row.explanation}</span>
            </div>
          </>
        )
      },
      ...self.props.toolIDs.map(
        t =>
          ({
            title: (
              <span>
                {getToolIcon(t, self.props.toolIDs)} {mkToolIDString(t)}
              </span>
            ),
            field: makeToolColumnKey(t),
            type: "boolean",
            style: { textAlign: "center" },
            render: (row: RowType) => {
              if (!row[makeToolColumnKey(t)]) {
                return undefined;
              }
              return (
                <Conclusions.SpecificDetection.TableCellIcon
                  toolID={t}
                  alerts={this.props.alerts.filter(
                    a =>
                      a.toolID === t &&
                      row.commit.commitID === a.commit.commitID &&
                      row.file === a.file &&
                      row.line === a.line
                  )}
                  hasRun={(self.props.toolRuns[t] || []).includes(
                    this.props.unpatchedCommit.commitID
                  )}
                  commit={this.props.unpatchedCommit}
                />
              );
            }
          } as MaterialTable.Column<RowType>)
      )
    ];
    let rows = self.props.weaknesses.map(w => {
      let row = {
        compactLocation: makeCompactLocationString(w.file, w.line),
        explanation: w.explanation,
        line: w.line,
        file: w.file,
        commit: w.commit
      } as RowType;
      self.props.toolIDs.forEach(
        t =>
          (row[makeToolColumnKey(t)] = self.props.alerts.some(
            ta =>
              ta.toolID === t &&
              ta.isOnTarget &&
              w.line === ta.line &&
              w.file === ta.file
          ))
      );
      return row;
    });
    let firstRow: {
      [columnName: string]: {
        style?: React.CSSProperties;
        content?: JSX.Element;
      };
    } = {
      [columns[0].field]: {
        content: (
          <span className="vulnerability-detected">Vulnerability detected</span>
        )
      }
    };

    let secondRow: {
      [columnName: string]: {
        style?: React.CSSProperties;
        content?: JSX.Element;
      };
    } = {
      [columns[0].field]: {
        content: <span className="patch-recognized">Patch recognized</span>
      }
    };
    self.props.toolIDs.forEach(t => {
      let comparison = this.props.alertCountComparisons.find(
        cmp => cmp.toolID == t
      );
      firstRow[makeToolColumnKey(t)] = {
        style: { textAlign: "center" },
        content: (
          <Conclusions.Detection.TableCellIcon
            toolID={t}
            hasRun={(self.props.toolRuns[t] || []).includes(
              self.props.unpatchedCommit.commitID
            )}
            unpatchedCommit={self.props.unpatchedCommit}
            detected={comparison.counts.some(c => c.before > 0)}
            hits={self.props.alerts.filter(
              a =>
                a.commit.commitID === self.props.unpatchedCommit.commitID &&
                a.toolID === t &&
                a.isOnTarget
            )}
            weaknesses={self.props.weaknesses.filter(
              w => w.commit.commitID === self.props.unpatchedCommit.commitID
            )}
          />
        )
      };

      secondRow[makeToolColumnKey(t)] = {
        style: { textAlign: "center" },
        content: (
          <Conclusions.Recognition.TableCellIcon
            conclusion={comparison.conclusion}
            toolID={t}
            patchCommit={self.props.patchCommit}
            unpatchedCommit={self.props.unpatchedCommit}
            hits={self.props.alerts.filter(a => a.isOnTarget)}
            weaknesses={self.props.weaknesses}
            commitRuns={self.props.toolRuns[t] || []}
          />
        )
      };
    });
    return (
      <MyTables.MyCustomTable
        columns={columns}
        firstRow={firstRow}
        secondRow={secondRow}
        rows={rows}
      />
    );
  }
}

export default class CVEResultSummarization extends React.Component<Props> {
  constructor(props: Props) {
    super(props);
  }
  render() {
    let self = this;
    let comparisons: AlertCountComparison[] = makeComparisons(
      self.props.toolIDs,
      self.props.alerts,
      self.props.unpatchedCommit.commitID,
      self.props.patchCommit.commitID,
      self.props.toolRuns
    );

    let tabs = [
      {
        tabTitle: "Overview",
        tabContent: (
          <OverviewTable
            CVE={self.props.CVE}
            toolIDs={self.props.toolIDs}
            alertCountComparisons={comparisons}
            alerts={self.props.alerts}
            weaknesses={self.props.weaknesses}
            setSourceFocus={self.props.setSourceFocus}
            patchCommit={self.props.patchCommit}
            unpatchedCommit={self.props.unpatchedCommit}
            toolRuns={self.props.toolRuns}
          />
        )
      },
      ...groupAlertsByTool(self.props.alerts, self.props.toolIDs).map(
        alertGroup => ({
          tabTitle: (
            <span>
              {getToolIcon(alertGroup.toolID, self.props.toolIDs)}{" "}
              {mkToolIDString(alertGroup.toolID)}
            </span>
          ),
          tabContent: (
            <ToolView
              CVE={self.props.CVE}
              toolID={alertGroup.toolID}
              alertsFromToolOnUnpatched={alertGroup.alerts.filter(
                a => a.commit.commitID === self.props.unpatchedCommit.commitID
              )}
              alertsFromToolOnPatched={alertGroup.alerts.filter(
                a => a.commit.commitID === self.props.patchCommit.commitID
              )}
              weaknesses={self.props.weaknesses}
              alertCountComparison={comparisons.find(
                cmp => cmp.toolID === alertGroup.toolID
              )}
              patchCommit={self.props.patchCommit}
              unpatchedCommit={self.props.unpatchedCommit}
              setSourceFocus={self.props.setSourceFocus}
              commitRuns={self.props.toolRuns[alertGroup.toolID] || []}
            />
          )
        })
      ),
      {
        tabTitle: "Benchmark data",
        tabContent: (
          <BenchmarkView
            CVE={self.props.CVE}
            patchCommit={self.props.patchCommit}
            unpatchedCommit={self.props.unpatchedCommit}
            CWEs={this.props.CWEs}
          />
        )
      }
    ];

    return (
      <Tabs>
        <TabList>
          {tabs.map(({ tabTitle }, i) => (
            <Tab key={i}>{tabTitle}</Tab>
          ))}
        </TabList>
        <hr />
        {tabs.map(({ tabContent }, i) => (
          <TabPanel key={i}>{tabContent}</TabPanel>
        ))}
      </Tabs>
    );
  }
}
