import * as React from "react";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import * as MaterialTable from "material-table";
import "react-tabs/style/react-tabs.css";
import { icons } from "./util";

type TTProps<RowData extends object> = {
  columns: MaterialTable.Column<RowData>[];
  groups: {
    description: string;
    data: RowData[];
  }[];
};
export class TabbedTables<T extends Object> extends React.Component<
  TTProps<T>
> {
  constructor(props: TTProps<T>) {
    super(props);
  }
  render() {
    return (
      <Tabs>
        <TabList>
          {Object.values(this.props.groups).map((group, i) => (
            <Tab key={i}>{group.description}</Tab>
          ))}
        </TabList>
        {Object.values(this.props.groups).map((group, i) => (
          <TabPanel key={i}>
            <MyTable columns={this.props.columns} data={group.data} />
          </TabPanel>
        ))}
      </Tabs>
    );
  }
}

export class MyTable<RowData extends object> extends React.Component<{
  columns: MaterialTable.Column<RowData>[];
  data: RowData[];
  parentChildData?: (row: RowData, rows: RowData[]) => RowData;
  options?: MaterialTable.Options<RowData>;
}> {
  constructor(props: any) {
    super(props);
  }
  render() {
    let pageLimit = 1000;
    return (
      <div style={{ maxWidth: "100%" }}>
        <MaterialTable.default
          title=""
          parentChildData={this.props.parentChildData}
          options={{
            search: false,
            filtering: false,
            sorting: false,
            paging: this.props.data.length > pageLimit,
            pageSize: pageLimit,
            ...this.props.options
          }}
          columns={this.props.columns}
          data={this.props.data}
        />
      </div>
    );
  }
}

type CustomTableProps<
  RowData extends object,
  BonusRow = {
    [columnName: string]: {
      content?: string | JSX.Element;
      style?: React.CSSProperties;
    };
  }
> = {
  columns: (MaterialTable.Column<RowData> & { style?: React.CSSProperties })[]; // XXX a bit too wide - only supports (parts of) .title, .render, .field, .type
  rows: RowData[];
  firstRow: BonusRow;
  secondRow: BonusRow;
};
export class MyCustomTable<
  // XXX drop this class entirely, and use kinded row-rendering instead
  RowData extends object,
  BonusRow extends {
    [columnName: string]: {
      content?: string | JSX.Element;
      style?: React.CSSProperties;
    };
  }
> extends React.Component<CustomTableProps<RowData, BonusRow>> {
  constructor(props: CustomTableProps<RowData, BonusRow>) {
    super(props);
  }
  render() {
    return (
      <div style={{ maxWidth: "100%" }}>
        <table className="custom-table">
          <thead>
            <tr>
              {this.props.columns.map((c, i) => (
                <th key={i}>{c.title}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            <tr key={-2}>
              {this.props.columns.map((c, j) => {
                let { content, style } = this.props.firstRow[
                  c.field as keyof BonusRow
                ];
                return (
                  <td style={style} key={j}>
                    {content}
                  </td>
                );
              })}
            </tr>
            <tr key={this.props.rows.length}>
              {this.props.columns.map((c, j) => {
                let { content, style } = this.props.secondRow[
                  c.field as keyof BonusRow
                ];
                return (
                  <td style={style} key={j}>
                    {content}
                  </td>
                );
              })}
            </tr>
            <tr key={-3} className="table-spacer">
              <td colSpan={this.props.columns.length}> </td>
            </tr>
            {this.props.rows.map((row, i) => (
              <tr key={i}>
                {this.props.columns.map((c, j) => {
                  let content;
                  let style: React.CSSProperties = c.style;
                  if (typeof c.render === "function") {
                    content = c.render(row, "row");
                  } else {
                    let value = row[c.field as keyof RowData];
                    if (c.type === "boolean") {
                      content = !!value ? icons.checkmark : icons.cross;
                      style = style || { textAlign: "center" };
                    } else {
                      content = value;
                    }
                  }
                  return (
                    <td style={style} key={j}>
                      {content}
                    </td>
                  );
                })}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  }
}
