import * as fs from "fs";
import * as path from "path";
import { Config, Dir, File } from "./types";
import { readConfigFile } from "./util";

export function getToolsSrcRoot(): Dir {
  return path.resolve(path.join(getProjectRoot(), "contrib", "tools"));
}
export function getProjectRoot(): Dir {
  if (__filename.endsWith("/config.ts")) {
    // happens during testing with jest
    return path.resolve(path.join(__dirname, ".."));
  }
  return path.resolve(path.join(__dirname, "..", "..", ".."));
}

function getDefaultConfig(root: Dir): Config {
  return {
    config: undefined,
    bcves: path.resolve(path.join(root, "CVEs")),
    sources: path.resolve(path.join(root, "work", "sources")),
    results: path.resolve(path.join(root, "work", "results")),
    reports: path.resolve(path.join(root, "work", "reports")),
    export: path.resolve(path.join(root, "work", "export", "export.json")),
    tools: {},
    canonicalRepositoriesRoot: "https://github.com/ossf-cve-benchmark"
  };
}

export type ConfigArgs = {
  config?: File;
  bcves?: Dir;
  sources?: Dir;
  results?: Dir;
  reports?: Dir;
  export?: File;
};
export const DEFAULT_TIMEOUT = 30 * 60 * 1000;
export function getConfig(args: ConfigArgs): Config {
  let implicitConfigFile = "config.json";
  let configFile =
      args.config || fs.existsSync(implicitConfigFile)
        ? implicitConfigFile
        : undefined,
    defaultConfig = getDefaultConfig(
      configFile ? path.dirname(configFile) : "."
    ),
    providedConfig: Config = configFile
      ? readConfigFile(configFile, false)
      : undefined,
    baseConfig: Config = { ...defaultConfig, ...providedConfig },
    fullConfig: Config = {
      config: configFile,
      bcves: args.bcves || baseConfig.bcves,
      sources: args.sources || baseConfig.sources,
      results: args.results || baseConfig.results,
      reports: args.reports || baseConfig.reports,
      export: args.export || baseConfig.export,
      canonicalRepositoriesRoot: baseConfig.canonicalRepositoriesRoot,
      tools: baseConfig.tools
    };
  Object.values(fullConfig.tools).forEach(t => {
    if (t.timeout === undefined) {
      t.timeout = DEFAULT_TIMEOUT;
    }
  });
  Object.entries(fullConfig).forEach(([k, v]) => {
    if (!v) {
      if (k === "viewerRepo" || k === "config") {
        return;
      }
      throw new Error(`Invalid config value for ${k}: ${JSON.stringify(v)}`);
    }
  });
  return fullConfig;
}
