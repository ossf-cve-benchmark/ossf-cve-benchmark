import { mkCommandlineParser } from "./CommandlineParser";
type Parsed = {
  [option: string]: string | string[] | boolean;
  command: string;
};
function parse(...args: string[]): Parsed {
  let parser = mkCommandlineParser(false);
  // Terrible hack for working with an argparse implementation that insists on calling process.exit
  // eslint-disable-next-line @typescript-eslint/unbound-method
  let old = process.exit;
  process.exit = () => {
    throw new Error();
  };
  let parsed = parser.parse_args(args) as Parsed;
  process.exit = old;
  return parsed;
}
describe("Commandlineparser", () => {
  describe("All command types are supported", () => {
    [
      "report --kind txt *",
      "list *",
      "filter *",
      "tools",
      "run --tool X *",
      "export *",
      "download-commits *",
      "check --schema BCVE CVEs",
      "upload-commits *"
    ].forEach(argLine =>
      test(`'${argLine}' is supported`, () => {
        expect(parse(...argLine.split(" ")).command).toBeTruthy();
      })
    );
  });
  describe("Documentation examples are supported", () => {
    [
      // README.md (2020-11-25)
      "run --tool eslint-default CVE-2018-16492 CVE-2020-4066",
      "report --kind server --tool eslint-default CVE-2018-16492 CVE-2020-4066",
      "report --kind txt --tool eslint-default CVE-2018-16492 CVE-2020-4066",
      "report --kind server --import export.json --tool eslint-default CVE-2018-16492 CVE-2020-4066"
    ].forEach(argLine =>
      test(`'${argLine}' is supported`, () => {
        expect(parse(...argLine.split(" ")).command).toBeTruthy();
      })
    );
  });
  test("Exceptional situations are terminal", () => {
    // NB: spams stdout/stderr
    expect(() => parse("unknown-command")).toThrow();
    expect(() => parse("list")).toThrow();
    expect(() => parse("list", "--help")).toThrow();
    expect(() => parse("--help")).toThrow();
  });
});
