import * as React from "react";
import * as Conclusions from "./Conclusions";
import { Alert, CommitData, Weakness } from "./shared-types";
import { AlertCountComparison, mkToolIDString, SetSourceFocus } from "./util";
type Props = {
  CVE: string;
  toolID: string;
  unpatchedCommit: CommitData;
  patchCommit: CommitData;
  weaknesses: Weakness[];
  alertCountComparison: AlertCountComparison;
  alertsFromToolOnUnpatched: Alert[];
  alertsFromToolOnPatched: Weakness[];
  setSourceFocus: SetSourceFocus;
  commitRuns: string[];
};

type OtherAlertsProps = {
  toolID: string;
  otherAlerts: Alert[];
};
class OtherAlerts extends React.Component<OtherAlertsProps> {
  constructor(props: OtherAlertsProps) {
    super(props);
  }

  render() {
    if (this.props.otherAlerts.length === 0) {
      return (
        <>No unrelated alerts reported by {mkToolIDString(this.props.toolID)}</>
      );
    }
    let groupMap: Map<
      string,
      {
        isForRuleOnATarget: boolean;
        ruleID: string;
        alerts: Alert[];
        url: string;
      }
    > = new Map();
    this.props.otherAlerts.forEach(a => {
      if (!groupMap.has(a.ruleID)) {
        groupMap.set(a.ruleID, {
          isForRuleOnATarget: a.isForRuleOnATarget,
          ruleID: a.ruleID,
          alerts: [],
          url: a.url // XXX assumes a single url for each ruleID
        });
      }
      groupMap.get(a.ruleID).alerts.push(a);
    });
    let grouped: {
      isForRuleOnATarget: boolean;
      ruleID: string;
      alerts: Alert[];
      url: string;
    }[] = [];
    groupMap.forEach(v => grouped.push(v));
    grouped.sort((g1, g2) => {
      return g1.ruleID.localeCompare(g2.ruleID);
    });

    let alertCountsForRulesOnTargetLines = grouped
      .filter(g => g.isForRuleOnATarget)
      .map(g => (
        <>
          {g.alerts.length} by rule <a href={g.url}>{g.ruleID}</a>
        </>
      ));

    let countsForOtherRules = grouped
      .filter(g => !g.isForRuleOnATarget)
      .reduce(
        (acc, g) => {
          acc.rules++;
          acc.alerts += g.alerts.length;
          return acc;
        },
        { rules: 0, alerts: 0 }
      );

    let otherRulesLine = countsForOtherRules.alerts > 0 && (
      <>
        {countsForOtherRules.alerts} by {countsForOtherRules.rules}{" "}
        {alertCountsForRulesOnTargetLines.length > 0 && <>other</>} rules
      </>
    );
    let lines = [...alertCountsForRulesOnTargetLines, otherRulesLine].filter(
      e => !!e
    );
    return (
      <>
        Unrelated alerts reported by {mkToolIDString(this.props.toolID)}:
        <ul>
          {lines.map((line, i) => (
            <li key={i}>{line}</li>
          ))}
        </ul>
      </>
    );
  }
}
export default class ToolView extends React.Component<Props> {
  render() {
    let props = this.props,
      hits = props.alertsFromToolOnUnpatched.filter(a => a.isOnTarget);
    if (!props.commitRuns.includes(props.unpatchedCommit.commit)) {
      return (
        <Conclusions.Missing.Sentence
          toolID={props.toolID}
          commit={props.unpatchedCommit}
        />
      );
    }
    let showOtherAlerts = false;
    return (
      <div>
        <h3>Conclusion</h3>
        <Conclusions.Recognition.Sentence
          toolID={props.toolID}
          unpatchedCommit={props.unpatchedCommit}
          hits={hits}
          weaknesses={props.weaknesses}
          conclusion={props.alertCountComparison.conclusion}
          patchCommit={props.patchCommit}
          commitRuns={props.commitRuns}
        />
        <h3>CVE detection</h3>
        <Conclusions.Detection.DetailedExplanation
          toolID={props.toolID}
          weaknesses={props.weaknesses}
          alerts={props.alertsFromToolOnUnpatched.filter(a => a.isOnTarget)}
          setSourceFocus={props.setSourceFocus}
        />
        <h3>Patch recognition</h3>
        <Conclusions.Recognition.DetailedExplanation
          toolID={props.toolID}
          patchCommit={props.patchCommit}
          unpatchedCommit={props.unpatchedCommit}
          alertCountComparison={props.alertCountComparison}
          commitRuns={props.commitRuns}
        />
        {showOtherAlerts && (
          <>
            <h3>Other alerts</h3>
            <OtherAlerts
              toolID={props.toolID}
              otherAlerts={props.alertsFromToolOnUnpatched.filter(
                a => !a.isOnTarget
              )}
            />
          </>
        )}
      </div>
    );
  }
}
