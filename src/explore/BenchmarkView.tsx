import * as React from "react";
import * as MyCodeMirrors from "./MyCodeMirrors";
import { CommitData } from "./shared-types";
import { cachingTextFetch, mkSimpleURL } from "./util";
type Props = {
  CVE: string;
  unpatchedCommit: CommitData;
  patchCommit: CommitData;
  CWEs: string[];
};
function Links(props: {
  CVE: string;
  CWEs: string[];
  unpatchedCommit: CommitData;
  patchCommit: CommitData;
}) {
  let links = [
    {
      name: "Benchmark source",
      data: [
        {
          // XXX
          url: `https://github.com/ossf-cve-benchmark/ossf-cve-benchmark/blob/main/CVEs/${props.CVE}.json`,
          text: `${props.CVE}.json`
        }
      ]
    },
    {
      name: "CVE",
      data: [
        {
          text: `NIST NVD ${props.CVE}`,
          url: `https://nvd.nist.gov/vuln/detail/${props.CVE}`
        },
        {
          text: `MITRE ${props.CVE}`,
          url: `https://cve.mitre.org/cgi-bin/cvename.cgi?name=${props.CVE}`
        }
      ]
    },
    {
      name: "CWEs",
      data: [
        ...props.CWEs.sort().map((cwe: string) => {
          let number = +cwe.match(/^CWE-(\d+)$/)?.[1];
          return {
            text: `MITRE CWE-${number}`,
            url: `https://cwe.mitre.org/data/definitions/${number}.html`
          };
        })
      ]
    },
    {
      name: "Commits",
      data: [
        {
          text: "Unpatched",
          url: props.unpatchedCommit.permalink
        },
        {
          text: "Patched",
          url: props.patchCommit.permalink
        }
      ]
    }
  ];
  return (
    <ul>
      {links.map((g, i) => (
        <li key={i}>
          {g.name}:{" "}
          {g.data.map((l, j) => (
            <span>
              <a key={j} href={l.url}>
                {l.text}
              </a>{" "}
            </span>
          ))}
        </li>
      ))}
    </ul>
  );
}
type SourceProps = { CVE: string };
type SourceState = { benchmarkSource: string };
class Source extends React.Component<SourceProps, SourceState> {
  constructor(props: SourceProps) {
    super(props);
    this.state = { benchmarkSource: null };
  }
  async componentDidMount() {
    let source = await cachingTextFetch(
      mkSimpleURL("/data/getBenchmarkSource", {
        CVE: this.props.CVE
      })
    );
    this.setState({ benchmarkSource: source });
  }

  render() {
    if (this.state.benchmarkSource === null) {
      return null;
    }
    return (
      <>
        <MyCodeMirrors.default.CodeMirror
          value={this.state.benchmarkSource}
          options={{
            readOnly: true,
            mode: { name: "javascript", mode: "json" }
          }}
          editorDidMount={e => {
            e.setSize(null, 300);
            e.refresh();
          }}
        />
      </>
    );
  }
}
export default class BenchmarkView extends React.Component<Props> {
  constructor(props: Props) {
    super(props);
  }

  render() {
    return (
      <>
        <div>
          <Source CVE={this.props.CVE} />
        </div>

        <div>
          <Links
            CVE={this.props.CVE}
            CWEs={this.props.CWEs}
            unpatchedCommit={this.props.unpatchedCommit}
            patchCommit={this.props.patchCommit}
          />
        </div>
      </>
    );
  }
}
