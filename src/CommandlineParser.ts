import * as argparse from "argparse";

let commandNamesAndDescriptions = {
  list: "Lists the selected CVEs",
  filter: "Filters CVEs by inspecting the CVE data content",
  download: "Downloads the relevant commits for the selected CVEs",
  tools: "Displays the analysis tools that are available for the `run` command",
  run: "Runs an analysis tool on the source code of the selected CVEs",
  export:
    "Exports CVE and analysis tool data for the selected CVEs into a single file",
  report: "Generates reports based on the content of an exported file",
  explore: "Starts a server for interactive exploration of the selected CVEs"
};
let ArgumentParser = argparse.ArgumentParser,
  parser = new ArgumentParser({
    add_help: true,
    prog: "bin/cli",
    description: ["CLI for ossf-cve-benchmark", ""]
      .concat(
        Object.entries(commandNamesAndDescriptions).map(
          ([k, v]) => `- ${k}: ${v}`
        )
      )
      .concat([""])
      .concat([
        "When the last arguments of a command is 'refs', the following CVE-references can be used to select CVEs of interest:",
        "- wildcard, ex. '*'",
        "- CVE identifier, ex. 'CVE-2020-15119'",
        "- year, ex. 'year:2020'",
        "- file name extension, ex. 'ext:js'",
        "- CWE identifier, ex. 'CWE-079'",
        "- CWE top list, ex. 'cwe-top:25:2020'",
        "- incomplete, ex. 'incomplete'"
      ])
      .join("\n"),
    formatter_class: argparse.RawTextHelpFormatter
  }),
  rootParser = parser,
  subparsers = rootParser.add_subparsers({ dest: "command" });

//
// download-commits
//
parser = subparsers.add_parser("download-commits", {
  add_help: true,
  description: commandNamesAndDescriptions.download
});
parser.add_argument("--config", {
  required: false
});
parser.add_argument("--anonymous", {
  required: false,
  action: "store_true"
});
parser.add_argument("--bcves-dir", {
  required: false
});
parser.add_argument("--sources-dir", {
  required: false
});
parser.add_argument("refs", { nargs: "+" });

//
// upload-commits
//
parser = subparsers.add_parser("upload-commits", {
  add_help: true,
  description: commandNamesAndDescriptions.download
});
parser.add_argument("--config", {
  required: false
});
parser.add_argument("--bcves-dir", {
  required: false
});
parser.add_argument("--sources-dir", {
  required: false
});
parser.add_argument("--repository-root", {
  required: true
});
parser.add_argument("refs", { nargs: "+" });

//
// run
//
parser = subparsers.add_parser("run", {
  add_help: true,
  description: commandNamesAndDescriptions.run
});
parser.add_argument("--config", {
  required: false
});
parser.add_argument("--bcves-dir", {
  required: false
});
parser.add_argument("--sources-dir", {
  required: false
});
parser.add_argument("--tool-id", {
  required: true
});
parser.add_argument("--results-dir", {
  required: false
});
parser.add_argument("refs", { nargs: "+" });

//
// export
//
parser = subparsers.add_parser("export", {
  add_help: true,
  description: commandNamesAndDescriptions.export
});
parser.add_argument("--config", {
  required: false
});
parser.add_argument("--results-dir", {
  required: false
});
parser.add_argument("--tool-id", {
  required: false,
  action: "append"
});
parser.add_argument("--export-file", {
  required: false
});
parser.add_argument("--sources-dir", {
  required: false
});
parser.add_argument("--no-export-file", {
  required: false,
  action: "store_true"
});
parser.add_argument("--anonymize", {
  required: false,
  action: "store_true"
});
parser.add_argument("--no-sources", {
  required: false,
  action: "store_true"
});
parser.add_argument("--allow-incomplete", {
  required: false,
  action: "store_true"
});
parser.add_argument("refs", { nargs: "+" });

//
// explore
//
parser = subparsers.add_parser("explore", {
  add_help: true,
  description: commandNamesAndDescriptions.export
});
parser.add_argument("--config", {
  required: false
});
parser.add_argument("--results-dir", {
  required: false
});
parser.add_argument("--report-dir", {
  required: false
});
parser.add_argument("--tool-id", {
  required: false,
  action: "append"
});
parser.add_argument("--sources-dir", {
  required: false
});
parser.add_argument("--port", {
  required: false,
  default: 8080
});
parser.add_argument("--anonymize", {
  required: false,
  action: "store_true"
});
parser.add_argument("--no-sources", {
  required: false,
  action: "store_true"
});
parser.add_argument("--allow-incomplete", {
  required: false,
  action: "store_true"
});
parser.add_argument("refs", { nargs: "+" });

//
// report
//
parser = subparsers.add_parser("report", {
  add_help: true,
  description: commandNamesAndDescriptions.report
});
parser.add_argument("--config", {
  required: false
});
parser.add_argument("--report-dir", {
  required: false
});
parser.add_argument("--report-format", {
  required: false,
  choices: ["txt", "md", "html", "csv"],
  default: "txt"
});
parser.add_argument("--export-file", {
  required: false
});

//
// tools
//
parser = subparsers.add_parser("tools", {
  add_help: true,
  description: commandNamesAndDescriptions.tools
});
parser.add_argument("--config", {
  required: false
});

//
// check
//
parser = subparsers.add_parser("check", {
  add_help: true,
  description: commandNamesAndDescriptions.tools
});
parser.add_argument("--schema", {
  required: true,
  choices: ["BCVE", "Log", "Export", "Config"]
});
parser.add_argument("files", { nargs: "+" });

//
// list
//
parser = subparsers.add_parser("list", {
  add_help: true,
  description: commandNamesAndDescriptions.list
});
parser.add_argument("--config", {
  required: false
});
parser.add_argument("--bcves-dir", {
  required: false
});
parser.add_argument("--sources-dir", {
  required: false
});
parser.add_argument("--full", {
  required: false,
  action: "store_true"
});

parser.add_argument("refs", { nargs: "+" });

//
// filter
//
parser = subparsers.add_parser("filter", {
  add_help: true,
  description: commandNamesAndDescriptions.filter
});
parser.add_argument("--config", {
  required: false
});
parser.add_argument("--bcves-dir", {
  required: false
});
parser.add_argument("-v", "--invert-match", {
  required: false,
  action: "store_true"
});
parser.add_argument("refs", { nargs: "+" });

export default rootParser;
