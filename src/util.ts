import "module-alias/register";
import { BCVE, BCVELog, Config, Export, File } from "@types";
import * as fs from "fs";
import * as validation from "./validation";
export function readJSONFile(file: File): any {
  let content = fs.readFileSync(file, "utf8").trim();
  try {
    return JSON.parse(content);
  } catch (e) {
    console.error(`Could not parse ${file} as a JSON file ('${content}')`);
    throw e;
  }
}
export function writeJSONFile(file: File, value: any): void {
  try {
    fs.writeFileSync(file, JSON.stringify(value), "utf8");
  } catch (e) {
    console.error(`Could not write ${file} as a JSON file.`);
    throw e;
  }
}

export function assert(v: any) {
  if (!v) {
    throw new Error(`AssertionError: ${v} is falsy`);
  }
}

export function writeExportFile(file: File, o: Export): void {
  validateAndWrite(o, file, validation.SchemaName.Export);
}

export function readExportFile(file: File): Export {
  return readAndValidate(file, validation.SchemaName.Export);
}

export function readBCVEFile(file: File): BCVE {
  return readAndValidate(file, validation.SchemaName.BCVE);
}

export function writeLogFile(file: File, o: BCVELog): void {
  validateAndWrite(o, file, validation.SchemaName.Log);
}

export function readLogFile(file: File): BCVELog {
  return readAndValidate(file, validation.SchemaName.Log);
}

export function readConfigFile(file: File): Config {
  return readAndValidate(file, validation.SchemaName.Config);
}

function readAndValidate<T>(file: File, schemaName: validation.SchemaName): T {
  let o = readJSONFile(file);
  try {
    validation.validateSingle(o, schemaName);
    return o;
  } catch (e) {
    throw new Error(
      `Could not read and validate ${file} as ${schemaName}: ${e.message}`
    );
  }
}

function validateAndWrite<T>(
  o: T,
  file: File,
  schemaName: validation.SchemaName
) {
  try {
    validation.validateSingle(o, schemaName);
    writeJSONFile(file, o);
  } catch (e) {
    throw new Error(
      `Could not validate and write ${file} as ${schemaName}: ${e.message}`
    );
  }
}
