import { BCVE, BCVELog, Dir, Export, File } from "./types";
import { readJSONFile } from "./util";
import Ajv from "ajv";
import * as path from "path";

export enum SchemaName {
  BCVE = "BCVE",
  Log = "Log",
  Export = "Export",
  Config = "Config",
  DriverInputs = "DriverInputs"
}

function getSchemaRoot(): Dir {
  if (__filename.endsWith("/validation.ts")) {
    // happens during testing with jest
    return path.resolve(path.join(__dirname, "..", "schemas"));
  }
  return path.resolve(path.join(__dirname, "..", "..", "..", "schemas"));
}

function getSchema(name: SchemaName | "ts-defs"): { file: File; id: string } {
  let schema = {
    file: path.resolve(path.join(getSchemaRoot(), `${name}.schema.json`)),
    id: `https://github.com/ossf-cve-benchmark/ossf-cve-benchmark/schemas/${name}.schema.json`
  };
  return schema;
}

export function getSchemaID(schema: SchemaName): string {
  return getSchema(schema).id;
}

export function makeValidator(): Ajv.Ajv {
  let validator = new Ajv({
    schemas: [...Object.keys(SchemaName), "ts-defs"].map(name =>
      readJSONFile(getSchema(name as any).file)
    ),
    allErrors: false
  });
  return validator;
}

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export function validateSingle(
  o: any,
  name: SchemaName,
  fatal: boolean,
  file?: File
): void {
  let ajv = makeValidator(),
    valid = ajv.validate(getSchemaID(name), o);
  if (!valid) {
    let msg = `${SchemaName[name]}-Validation error ${
      file ? `for ${file}` : ""
    }: '${ajv.errorsText()}'`;
    if (fatal) {
      throw new Error(msg);
    } else {
      console.warn(`WARNING: ${msg}`);
    }
  }
}
