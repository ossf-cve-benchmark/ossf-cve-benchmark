import { BCVE, BCVELog, Export, File } from "./types";
import { readJSONFile } from "./util";
import Ajv from "ajv";
import * as path from "path";

export enum SchemaName {
  BCVE = "BCVE",
  Log = "Log",
  Export = "Export",
  Config = "Config"
}
function getSchema(name: SchemaName | "ts-defs"): { file: File; id: string } {
  return {
    file: path.resolve(
      path.join(__dirname, "..", "..", "schemas", `${name}.schema.json`)
    ),
    id: `https://github.com/ossf/cve-benchmark/schemas/${name}.schema.json`
  };
}

export function getSchemaID(schema: SchemaName) {
  return getSchema(schema).id;
}

export function makeValidator() {
  return new Ajv({
    schemas: [...Object.keys(SchemaName), "ts-defs"].map(name =>
      readJSONFile(getSchema(name as any).file)
    ),
    allErrors: true
  });
}

export function validateSingle(o: any, name: SchemaName) {
  let ajv = makeValidator(),
    valid = ajv.validate(getSchemaID(name), o);
  if (!valid) {
    throw new Error(
      `${SchemaName[name]}-Validation error: '${ajv.errorsText()}'`
    );
  }
}
export function validateBCVE(bcve: BCVE) {
  validateSingle(bcve, SchemaName.BCVE);
}
export function validateExport(exp: Export) {
  validateSingle(exp, SchemaName.Export);
}
export function validateLog(log: BCVELog) {
  validateSingle(log, SchemaName.Log);
}
export function validateConfig(log: BCVELog) {
  validateSingle(log, SchemaName.Config);
}
