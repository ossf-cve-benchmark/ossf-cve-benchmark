export type Dir = string;
export type File = string;
export type CVEString = string;
export type RepositoryIdentifier = string;
export type CommitID = string;
export type ToolID = string;
export type RuleID = string;
export type CWEString = string;
/**
 * A sourc location.

 * @title SourceLocation
*/
export type SourceLocation = {
  /**
   * The path to the file.
   */
  file: File;
  /**
   * The line number.
   */
  line: number;
};
/**
 * A weakness in some source code.
 *
 * @title Weakness
 */
export type Weakness = {
  /**
   * The source location of the weakness, relative to the root of the vulnerable project
   */
  location: SourceLocation;
  /**
   * An explanation for this weakness.
   */
  explanation: string;
};

/**
 * An alert raised by an analysis tool.
 *
 * @title BCVEAlert
 */
export type BCVEAlert = {
  /**
   * The source location of the weakness, relative to the root of the vulnerable project
   */
  location: SourceLocation;

  /**
   * The ID of the rule that produced this alert.
   */
  ruleID: RuleID;

  /**
   * The URL for additional information about the rule that produced this alert.
   */
  url?: string;
};

/**
 * A description of a commit that is related to a CVE.
 *
 * @title CommitDescription
 */
export type CommitDescription = {
  /**
   * The commit.
   */
  commit: CommitID;

  /**
   * The local source directory whe the source code for this commit is located, if any.
   */
  localSourceDirectory?: Dir;

  /**
   * The weaknesses related to the CVE of this commit, if any.
   */
  weaknesses?: Weakness[];

  /**
   * A collection of analysis tool runs for this commit, if any.
   */
  runs?: BCVERun[];
};

/**
 * The state of a CVE.
 *
 * @title CVEState
 */
export enum CVEState {
  ACCEPTED = "ACCEPTED",
  DISPUTED = "DISPUTED",
  REJECTED = "REJECTED",
  RESERVED = "RESERVED"
}
/**
 * A benchmark CVE.
 *
 * See docs/benchmark-CVEs.md for an in-depth explanation of this type.
 *
 * @title BCVE
 */
export type BCVE = {
  /**
   * The CVE identifier.
   */
  CVE: CVEString;
  /**
   * The CVE state of the CVE
   */
  state?: CVEState;
  /**
   * The string that identifies the repository that hosts the commits.
   */
  repository?: RepositoryIdentifier;
  /**
   * The prePatch commit.
   * @title prePatch
   */
  prePatch?: CommitDescription;
  /**
   * The postPatch commit.
   */
  postPatch?: CommitDescription;
  /**
   * The relevant CWEs.
   */
  CWEs?: CWEString[];
};
/**
 * A run of an analysis tool on a commit related to a CVE.
 *
 * @title StandaloneRun
 */
export type StandaloneRun = BCVERun & {
  /**
   * The CVE identifier.
   */
  CVE: CVEString;
  /**
   * The commit.
   */
  commit: CommitID;
};
/**
 * A run of an analysis tool on some source code.
 *
 * @title BCVERun
 */
export type BCVERun = {
  /**
   * An ID for the tool of the run.
   */
  toolID: ToolID;
  /**
   * The alerts produced by the tool.
   */
  alerts?: BCVEAlert[];
  /**
   * The final status for the run.
   */
  status: BCVEResultStatus;
  /**
   * A command-line string that enables reproduction of the run independent of the benchmarking tooling.
   */
  reproduction?: string;
};

/**
 * A collection of analysis tool runs.
 *
 * @title BCVELog
 */
export type BCVELog = {
  // (this structure mimics relevant the parts of sarif.Log)
  /**
   * The runs.
   */
  runs: StandaloneRun[];
};

/**
 * A status for a run of an analysis tool.
 *
 * @title BCVEResultStatus
 */
export enum BCVEResultStatus {
  SUCCESS = "SUCCESS",
  PENDING = "PENDING",
  TIMEOUT = "TIMEOUT",
  CRASH = "CRASH",
  UNSUPPORTED_SOURCE = "UNSUPPORTED_SOURCE",
  UNSUPPORTED_CVE = "UNSUPPORTED_CVE",
  NO_SOURCES = "NO_SOURCES"
}

/**
 * A collection of exported benchmark CVEs.
 *
 * @title Export
 */
export type Export = BCVE[];

/**
 * A configuration object.
 *
 * @title Config
 */
export type Config = {
  /**
   * The directory where the Benchmark CVEs are located.
   */
  bcves?: Dir;

  /**
   * The directory where the source code for the CVEs are located.
   */
  sources?: Dir;

  /**
   * The directory where the results for the analysis tool runs are located.
   */
  results?: Dir;

  /**
   * The directory where the reports are located.
   */
  reports?: Dir;

  /**
   * The file that is exported to.
   */
  export?: File;

  /**
   * The configurations of the analysis tool drivers.
   */
  tools?: {
    /**
     * The name of the driver, and the associated options.
     */
    [toolName: string]: DriverConfig<any>;
  };

  /**
   * The location where canonical repositories exists for each CVE as `<root>/<CVE>.git`.
   */
  canonicalRepositoriesRoot?: string;
};

/**
 * A configuration for how to run an analysis tool driver.
 *
 * @title DriverConfig
 */
export type DriverConfig<T> = {
  /**
   * The binary to execute with the `run` command.
   */
  bin: string;
  /**
   * The leading arguments to execute the `bin` with. These arguments are followed by a single argument with a run-specific input file.
   */
  args: string[];
  /**
   * The time in milliseconds that the driver will permit the analysis tool to analyze a commit in.
   */
  timeout?: number;
  /**
   * Additional options for the driver (preferred over a long `args` arrray).
   */
  options: T;
};

/**
 * The inputs accessible to the drivers that are executed by the `run` command (the inputs are provided as a JSON file, pointed to by the last commandline argument).
 */
export type DriverInputs = {
  /**
   * The ID of the tool that is being run.
   */
  toolID: ToolID;
  /**
   * The benchmark CVEs to analyze.
   */
  bcves: BCVE[];
  /**
   * The effective configuration used by the Benchmarker.
   */
  config: Config;
};
