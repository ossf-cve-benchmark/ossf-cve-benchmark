export type Dir = string;
export type File = string;
export type CVEString = string;
export type URLString = string;
export type CommitID = string;
export type ToolName = string;
export type ToolID = string;
export type RuleID = string;
export type InterpolatableString = string;
export type CWEString = string;
/**
 * A sourc location.

 * @title SourceLocation
*/
export type SourceLocation = {
  /**
   * The path to the file.
   */
  file: File;
  /**
   * The line number.
   */
  line: number;
};
/**
 * A weakness in some source code.
 *
 * @title Weakness
 */
export type Weakness = {
  /**
   * The data format.
   */
  format: "simple";
  /**
   * The source location of the weakness, relative to the root of the vulnerable project
   */
  location?: SourceLocation;
  /**
   * An explanation for this weakness.
   */
  explanation: string;
};
// | {
//     format: "sarifv2.1.0";
//     result: sarif.Result;
//   };

/**
 * An alert raised by an analysis tool.
 *
 * @title BCVEAlert
 */
export type BCVEAlert = Weakness & {
  /**
   * The classification of the alert.
   */
  classification: AlertClassification;
  /**
   * The ID of the rule that produced this alert.
   */
  ruleID?: RuleID;
};

/**
 * A description of a commit that is related to a CVE.
 *
 * @title CommitDescription
 */
export type CommitDescription = {
  /**
   * The commit.
   */
  commit: CommitID;

  /**
   * The local source directory whe the source code for this commit is located, if any.
   */
  localSourceDirectory?: Dir;

  /**
   * The weaknesses related to the CVE of this commit, if any.
   */
  weaknesses?: Weakness[];

  /**
   * A collection of analysis tool runs for this commit, if any.
   */
  runs?: BCVERun[];
};

/**
 * The state of a CVE.
 *
 * @title CVEState
 */
export enum CVEState {
  ACCEPTED = "ACCEPTED",
  DISPUTED = "DISPUTED",
  REJECTED = "REJECTED",
  RESERVED = "RESERVED"
}
/**
 * A benchmark CVE.
 *
 * See bcves/README.md for an in-depth explanation of this type.
 *
 * @title BCVE
 */
export type BCVE = {
  /**
   * The CVE identifier.
   */
  CVE: CVEString;
  /**
   * The CVE state of the CVE
   */
  state?: CVEState;
  /**
   * The URL to the repository that hosts the commits.
   */
  repository?: URLString;
  /**
   * The patchBase commit.
   * @title patchBase
   */
  patchBase?: CommitDescription;
  /**
   * The postPatch commit.
   */
  postPatch?: CommitDescription;
  /**
   * The relevant CWEs.
   */
  CWEs?: CWEString[];
};
/**
 * A run of an analysis tool on a commit related to a CVE.
 *
 * @title StandaloneRun
 */
export type StandaloneRun = BCVERun & {
  /**
   * The CVE identifier.
   */
  CVE: CVEString;
  /**
   * The commit.
   */
  commit: CommitID;
};
/**
 * A run of an analysis tool on some source code.
 *
 * @title BCVERun
 */
export type BCVERun = {
  /**
   * An ID for the tool of the run.
   */
  toolID: ToolID;
  /**
   * The alerts produced by the tool.
   */
  alerts?: BCVEAlert[];
  /**
   * The final status for the run.
   */
  status: BCVEResultStatus;
  /**
   * A command-line string that enables reproduction of the run independent of the benchmarking tooling.
   */
  reproduction?: string;
};

/**
 * A collection of analysis tool runs.
 *
 * @title BCVELog
 */
export type BCVELog = {
  // this structure mimics relevant the parts of sarif.Log. Existing tooling should be relatively easy to change to support proper sarif.Log
  /**
   * The runs.
   */
  runs: StandaloneRun[];
};

/**
 * A status for a run of an analysis tool.
 *
 * @title BCVEResultStatus
 */
export enum BCVEResultStatus {
  SUCCESS = "SUCCESS",
  TIMEOUT = "TIMEOUT",
  CRASH = "CRASH",
  UNSUPPORTED_SOURCE = "UNSUPPORTED_SOURCE",
  UNSUPPORTED_CVE = "UNSUPPORTED_CVE",
  NO_SOURCES = "NO_SOURCES"
}

/**
 * A classication of an alert.
 *
 * @title AlertClassification
 */

export enum AlertClassification {
  TP = "TP",
  FP = "FP",
  IRRELEVANT = "IRRELEVANT",
  UNDECIDED = "UNDECIDED",
  ASSUMED_TP = "ASSUMED_TP"
}

/**
 * A collection of exported benchmark CVEs.
 *
 * @title Export
 */
export type Export = BCVE[];

/**
 * A configuration object.
 *
 * @title Config
 */
export type Config = {
  /**
   * The directory where the Benchmark CVEs are located.
   */
  bcvesDir?: Dir;

  /**
   * The directory where the source code for the CVEs are located.
   */
  sourcesDir?: Dir;

  /**
   * The directory where the results for the analysis tool runs are located.
   */
  resultsDir?: Dir;

  /**
   * The directory where the reports are located.
   */
  reportsDir?: Dir;

  /**
   * The file that is exported to.
   */
  exportFile?: File;

  /**
   * The name of the report to generate.
   */
  reportName?: string;

  /**
   * The preferred output format of the report that is generated.
   */
  reportFormat?: Format;

  /**
   * The configurations of the analysis tools.
   */
  tools?: {
    /**
     * The name of the analysis tool, and the associated options.
     */
    [toolName: string]: PluginSpecificOptions;
  };

  /**
   * The code-scanning enabled GitHub repositovy to display tool results at
   */
  viewerRepo?: string;
};

/**
 * A value that an analysis tool plugin knows how to interpret.
 *
 * @title PluginSpecificOptions
 */
export type PluginSpecificOptions = any;

/**
 * An output format for a report.
 */
export enum Format {
  txt = "txt",
  md = "md",
  html = "html",
  csv = "csv"
}
