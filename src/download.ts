import "module-alias/register";
import { BCVE, CommitID, Dir, URLString } from "@types";
import * as cp from "child_process";
import * as fs from "fs";
import * as path from "path";
import { assert } from "./util";
function downloadCommit(
  repository: URLString,
  commit: CommitID,
  dir: Dir,
  anonymous: boolean
) {
  assert(repository);
  assert(commit);
  assert(dir);
  console.log(`Progress: Downloading ${repository} ${commit} to ${dir} ...`);

  if (fs.existsSync(dir)) {
    console.log("Progres: Download target already exists, skipping download.");
  } else {
    // use authorized clones if possible
    let githubHttpsUrlPattern = /^https:\/\/github.com\/(.+?)\/(.+?).git$/,
      match = repository.match(githubHttpsUrlPattern),
      repositoryUrlToUse =
        match && !anonymous
          ? `git@github.com:${match[1]}/${match[2]}.git`
          : repository;

    let parent = path.dirname(dir);
    fs.mkdirSync(parent, { recursive: true });
    let DOWNLOAD = true;
    try {
      if (DOWNLOAD) {
        cp.execFileSync("git", ["clone", "--quiet", repositoryUrlToUse, dir]);
        console.log("Progress: Download complete.");
      } else {
        console.log("Progress: Skipping download due to configuration.");
      }
    } catch (e) {
      fs.rmdirSync(dir, { recursive: true });
      console.log(
        `Progress: Download of ${repository} ${commit} to ${dir} failed: ${e.message}`
      );
      console.error(e);
    }
  }
  if (!fs.existsSync(dir)) {
    console.log(
      `Progres: Downloaded ${dir} does not exist, skipping checkout ...`
    );
  } else {
    console.log(`Progres: Downloaded ${dir} exists, checking out ${commit}.`);
    try {
      cp.execFileSync("git", ["-C", dir, "checkout", "--quiet", commit]);
      console.log("Progress: Checkout complete.");
    } catch (e) {
      console.log(
        `Progress: Checkout of ${repository} ${commit} to ${dir} failed: ${e.message}`
      );
      fs.rmdirSync(dir, { recursive: true });
      console.error(e);
    }
  }
}

export function download(bcve: BCVE, anonymous: boolean) {
  downloadCommit(
    bcve.repository,
    bcve.patchBase.commit,
    bcve.patchBase.localSourceDirectory,
    anonymous
  );
  downloadCommit(
    bcve.repository,
    bcve.postPatch.commit,
    bcve.postPatch.localSourceDirectory,
    anonymous
  );
}
